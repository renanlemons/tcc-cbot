utter_O_que_é_C?:
  - text: "C é uma linguagem de programação de uso geral criada por Dennis Ritchie no The Bell Laboratories em 1972. É um idioma muito popular, apesar de ser velho.A principal razão de sua popularidade é porque é uma linguagem fundamental no campo da ciência da computação.C está fortemente associada ao UNIX, pois foi desenvolvido para escrever o sistema operacional UNIX."

utter_Por_que_aprender_C?:
  - text: "É uma das linguagens de programação mais populares do mundo, se você conhece C, não terá nenhum problema em aprender outras linguagens de programação populares, como Java, Python, C ++, C#, etc., pois a sintaxe é semelhante C é muito rápida, comparadaPara outras linguagens de programação, como Java e Python C é muito versátil;Pode ser usado em aplicações e tecnologias"

utter_Diferença_entre_C_e_C_++:
  - text: "C ++ foi desenvolvido como uma extensão de C, e ambos os idiomas têm quase a mesma sintaxe A principal diferença entre C e C ++ é que C ++ Suporte Classes e Objetos, enquanto C não"

utter_Iniciar:
  - text: "Este tutorial ensinará o básico de C. não é necessário ter nenhuma experiência de programação anterior."

utter_Tipos_numéricos:
  - text: "Use int quando precisar armazenar um número inteiro sem decimais, como 35 ou 1000, e flutuar ou dobrar quando precisar de um número de ponto flutuante (com decimais), como 9,99 ou 3.14515.Int Int MyNum = 1000;printf (%d, mynum);Experimente você mesmo »Float Float mynum = 5,75;printf (%f, mynum);Experimente você mesmo »duplo mynum = 19,99;printf (%lf, mynum);Experimente você mesmo »Float vs. Double a precisão de um valor de ponto flutuante indica quantos dígitos o valor pode terApós o ponto decimal.A precisão do flutuador é de seis ou setedígitos decimais, enquanto variáveis duplas têm uma precisãode cerca de 15 dígitos.Portanto, muitas vezes é mais seguro usar o dobro para a maioria dos cálculos - mas observe que ele ocupa o dobro da memória do que flutuar (8bytes vs. 4 bytes). Números flutuantes do escientíficos também podem ser um número científico com um e para indicar a potência de 10: exemplo float f1 = 35e3;duplo d1 = 12e4;printf (%f \ n, f1);printf (%LF, D1);Experimente você mesmo »❮ Anterior Próximo ❯ ★ +1 W3Schools Pathfinder Rastreie seu progresso - é grátis!Entrar Inscrever-se"

utter_Defina_precisão_decimal:
  - text: "Você provavelmente já percebeu que se você imprimir um número de ponto flutuante,A saída mostrará muitos dígitos após o ponto decimal: exemplo float myfloatnum = 3.5;duplo mydoublenum = 19,99;printf (%f \ n, myfloatnum);  // produz 3.500000 printf (%lf, mydoublenum);// saídas  19.990000 Experimente você mesmo »Se você deseja remover os zeros extras (defina precisão decimal), você pode usar umponto (.) seguido por um número que especifica quantos dígitos devem ser mostradosApós o ponto decimal: exemplo float myfloatnum = 3.5;printf (%f \ n, myfloatnum);// O padrão mostrará 6 dígitos após o ponto decimal printf (%. 1f \ n,  myfloatnum);// mostra apenas 1 dígito printf (%. 2f \ n, myfloatnum);// Apenas  mostre 2 dígitos printf (%. 4f, myfloatnum);// mostra apenas 4 dígitos Experimente você mesmo »"

utter_C_exercícios:
  - text: "Teste -se com exercícios Exercício: faça a saída do exemplo a seguir para mostrar apenas um dígito após o ponto decimal: Float MyScore = 9,5;printf (, myscore);Envie Resposta »Comece o exercício"

utter_Teste_-se_com_exercícios:
  - text: "Exercício: faça a saída do exemplo a seguir para mostrar apenas um dígito após o ponto decimal: Float MyScore = 9.5;printf (, myscore);Envie Resposta »Comece o exercício"

utter_Exercício_:
  - text: "Faça a saída do exemplo a seguir para mostrar apenas um dígito após o ponto decimal: float myScore = 9,5;printf (, myScore); enviar resposta »Inicie o exercício"

utter_Alterar_valores_variáveis:
  - text: "Se você atribuir um novo valor a uma variável existente, ele substituirá o valor anterior: exemplo int mynum = 15;// mynum é 15 mynum = 10;// agora mynum está 10 Experimente você mesmo »Você também pode atribuir o valor de uma variável a outra: exemplo int mynum = 15;int myothernum = 23;// Atribuir o valor de  myothernum (23) para mynum mynum = myothernum;// mynum agora tem 23 anos,  em vez de 15 printf (%d, mynum);Experimente você mesmo »ou copie valores para esvaziar variáveis: Exemplo // Crie uma variável e atribua o valor 15 a ele int mynum = 15;// Declare uma variável sem atribuir um valor no myotronse;// atribui o valor de mynum ao myothernum myothernum = mynum;//  O Myothernum agora tem 15 como um valor printf (%d, myothernum);Tente você mesmo "

utter_Adicione_variáveis_juntas:
  - text: "Para adicionar uma variável a outra variável, você pode usar o operador +: exemplo int x = 5;int y = 6;int sum = x + y;printf (%d, soma);Tente você mesmo "

utter_C_exercícios_2:
  - text: "Teste -se com exercícios Exercício: Exiba a soma de 5 + 10, usando duas variáveis: x e y.=;int y = 10;printf (%d, x + y);Envie Resposta »Comece o exercício"

utter_Teste_-se_com_exercícios_2:
  - text: "Exercício: exiba a soma de 5 + 10, usando duas variáveis: x e y.=;int y = 10;printf (%d, x + y);Envie Resposta »Comece o exercício"

utter_Exercício__2:
  - text: "Exiba a soma de 5 + 10, usando duas variáveis: x e y. =;int y = 10;printf (%d, x + y); enviar resposta »Inicie o exercício"

utter_Declarando_(criando)_variáveis:
  - text: "Para criar uma variável, especifique o tipo e atribua -lhe um valor: sintaxe tipo variatlebleName = value; onde o tipo é um dos tipos C (como o INT), e VariableName é o nome da variável (como x ou myname).O sinal igual é usado para atribuir um valor à variável.SO, para criar uma variável que deve armazenar um número, observe o seguinte exemplo: Exemplo Crie uma variável chamada mynum of tye Int e atribua o valor 15 a ele: int mynum= 15; você também pode declarar uma variável sem atribuir o valor e atribuir o valor posterior: Exemplo // declarar uma variável int mynum;// atribui um valor à variável mynum = 15;"

utter_Variáveis_de_saída:
  - text: "Você aprendeu com o capítulo de saída que você pode produzir valores/imprimir texto com a função printf (): exemplo printf (Hello World!);Experimente você mesmo »Em muitas outras linguagens de programação (como Python, Java e C ++), você normalmente usaria uma função de impressão para exibir o valor de uma variável.No entanto, isso não é possível em c: exemplo int mynum = 15;printf (mynum);// Nada acontece, tente você mesmo »Para produzir variáveis em C, você deve se familiarizar com algo chamado especificadores de formato , sobre o qual você aprenderá no próximo capítulo."

utter_C_exercícios_3:
  - text: "Teste -se com exercícios Exercício: Crie uma variável chamada Mynum e atribua o valor 50 a ele.=;Envie Resposta »Comece o exercício"

utter_Teste_-se_com_exercícios_3:
  - text: "Exercício: Crie uma variável chamada MyNum e atribua o valor 50 a ele.=;Envie Resposta »Comece o exercício"

utter_Exercício__3:
  - text: "Crie uma variável chamada MyNum e atribua o valor 50 a ele. =; Envie a resposta »Inicie o exercício"

utter_O_tipo_de_char:
  - text: "O tipo de dados de char é usado para armazenar um único caractere. O caractere deve estar cercado por citações únicas, como 'a' ou 'c', e usamos o especificador de formato %c para imprimi -lo: exemplo char mygrade = 'a';printf (%c, mygrade);Experimente você mesmo »Alternativamente, se você estiver familiarizado com o ASCII, poderá usar valores ASCII para exibir determinados caracteres.Observe que esses valores não estão cercados por citações (''),Como eles são números: exemplo char a = 65, b = 66, c = 67;printf (%c, a);printf (%c, b);printf (%c, c);Experimente você mesmo »Dica: uma lista de todos os valores ASCII pode ser encontrada em nossa referência da tabela ASCII."

utter_Notas_sobre_personagens:
  - text: "Se você tentar armazenar mais do que um único caractere, ele apenas imprimirá o últimoPersonagem: Exemplo char mytext = 'hello';printf (%c, myText);Experimente você mesmo »Nota: Não use o tipo de char para armazenar múltiploscaracteres, como pode produzir erros. Para armazenar vários caracteres (ou palavras inteiras), use strings (sobre as quais você aprenderá mais em um capítulo posterior): exemplo char mytext [] = hello;printf (%s, myText);Experimente você mesmo »Por enquanto, apenas saiba que usamos strings para armazenar vários caracteres/texto e o tipo de char para caracteres únicos.Entrar Inscrever-se"

utter_Declarar_várias_variáveis:
  - text: "Para declarar mais de uma variável do mesmo tipo, use uma lista separada por vírgula: exemplo int x = 5, y = 6, z = 50;printf (%d, x + y + z);Experimente você mesmo »Você também pode atribuir o mesmo valor a várias variáveis do mesmo tipo: exemplo int x, y, z;x = y = z = 50;printf (%d, x + y + z);Tente você mesmo "

utter_C_exercícios_4:
  - text: "Teste-se com exercícios Exercício: Preencha as peças ausentes para criar três variáveis do mesmo tipo, usando uma lista separada por vírgula: mynum1 = 10 mynum2 = 15 mynum3 = 25;printf (%d, mynum1 + mynum2 + mynum3);Envie Resposta »Comece o exercício"

utter_Teste_-se_com_exercícios_4:
  - text: "Exercício: Preencha as partes ausentes para criar três variáveis do mesmo tipo, usando uma lista separada por vírgula: mynum1 = 10 mynum2 = 15 mynum3 = 25;printf (%d, mynum1 + mynum2 + mynum3);Envie Resposta »Comece o exercício"

utter_Exercício__4:
  - text: "Preencha as peças ausentes para criar três variáveis do mesmo tipo, usando uma lista separada por vírgula: mynum1 = 10 mynum2 = 15 mynum3 = 25;printf (%d, mynum1 + mynum2 + mynum3); enviar resposta »Inicie o exercício"

utter_Especificadores_de_formato:
  - text: "Os especificadores de formato são usados juntamente com a função printf () para informar ao compilador que tipo de dados a variável está armazenando.Isso éBasicamente, um espaço reservado para o valor variável. Um especificador de formato iniciacom um sinal percentual %, seguido por um caractere. Por exemplo, para produzir o valor de uma variável int,use o formatoespecificador %d cercado por citações duplas (),Dentro da função printf (): exemplo int mynum = 15;printf (%d, mynum);// saídas 15 Experimente você mesmo »Imprimir outros tipos, use %c para char e %f para flutuação: exemplo // criar variáveis int mynum = 15;// Inteiro (número inteiro) Float  myfloatnum = 5,99;// Número do ponto flutuante Char MyLetter = 'D';//  Caractere // imprimir variáveis printf (%d \ n, mynum);printf (%f \ n, myfloatnum);printf (%c \ n, myletter);Experimente você mesmo »Para combinar o texto e uma variável, separe -os com uma vírgula dentro da função printf (): exemplo int mynum = 15;printf (Meu número favorito é: %d, mynum);Experimente você mesmo »Para imprimir tipos diferentes em uma função PrintF (), você pode usar oseguinte: exemplo int mynum = 15;char myletter = 'd';printf (Meu número é %d e meu  A carta é %C , Mynum, MyLetter); Experimente você mesmo» Você aprenderá mais sobre os tipos de dados em um capítulo posterior."

utter_C_exercícios_5:
  - text: "Teste -se com exercícios Exercício: use o especificador de formato correto para produzir o valor de mynum: int mynum = 15;printf (, mynum);Envie Resposta »Comece o exercício"

utter_Teste_-se_com_exercícios_5:
  - text: "Exercício: use o especificador de formato correto para gerar o valor de mynum: int mynum = 15;printf (, mynum);Envie Resposta »Comece o exercício"

utter_Exercício__5:
  - text: "Use o especificador de formato correto para emitir o valor de mynum: int mynum = 15;printf (, mynum); enviar resposta »Inicie o exercício"

utter_Tipos_de_dados:
  - text: "Conforme explicado no capítulo Variáveis, uma variável em C deve ser um tipo de dados especificado,e você deve usar um especificador de formato dentro da função printf () para exibi -lo: exemplo // criar variáveis int mynum = 5;// Inteiro (número inteiro) Float  myfloatnum = 5,99;// Número do ponto flutuante Char MyLetter = 'D';//  Caractere // imprimir variáveis printf (%d \ n, mynum);printf (%f \ n, myfloatnum);printf (%c \ n, myletter);Tente você mesmo "

utter_Tipos_de_dados_básicos:
  - text: "O tipo de dados especifica o tamanho e o tipo de informação que a variável armazena. Neste tutorial, focaremos os mais básicos: Tipo de dados Tamanho Descrição Exemplo Int 2 ou 4 Bytes armazena números inteiros, sem decimais 1 Float 4 Bytes Storesnúmeros, contendo um ou mais decimais.Suficiente paraArmazenamento de 6-7 dígitos decimais 1,99 Double 8 bytes armazena números fracionários, contendo um ou mais decimais.Suficiente paraArmazenamento de 15 dígitos decimais 1,99 Char 1 byte armazena um único caractere/letra/número, ou valores ASCII 'a'"

utter_Especificadores_de_formato_básico:
  - text: "Existem diferentes especificadores de formato para cada tipo de dados.Aqui estão alguns deeles: formato especificador Tipo de dados Experimente %d ou %eu vou tentar » %f ou %f flutuante Experimente» %lf duplo experimente » %c char experimente» %s usado para strings (texto), que você iráSaiba mais sobre um capítulo posterior, tente »"

utter_C_exercícios_6:
  - text: "Teste -se com exercícios Exercício: Adicione o tipo de dados correto para as seguintes variáveis: mynum = 5;myfloatnum = 5,99;myLetter = 'd';Envie Resposta »Comece o exercício"

utter_Teste_-se_com_exercícios_6:
  - text: "Exercício: Adicione o tipo de dados correto para as seguintes variáveis: mynum = 5;myfloatnum = 5,99;myLetter = 'd';Envie Resposta »Comece o exercício"

utter_Exercício__6:
  - text: "Adicione o tipo de dados correto para as seguintes variáveis: mynum = 5;myfloatnum = 5,99;myLetter = 'd'; enviar resposta »Inicie o exercício"

utter_C_nomes_de_variáveis:
  - text: "Todas as variáveis C devem ser identificadas com nomes únicos. Esses nomes únicos são chamados de identificadores. Identificadores podem ser nomes curtos (como x e y) ou nomes mais descritivos (idade, soma, total volume) .Note: Recomenda -se usar nomes descritivos emordem paraCrie código compreensível e sustentável: Exemplo // bom nome da variável int miniSperhour = 60;// ok, mas não tão fácil de  entenda o que realmente é int  M = 60;Experimente você mesmo »As regras gerais para nomear variáveis são: os nomes podem conter letras, dígitos e sublinhados, os nomes devem começar com uma letra ou um nomes de sublinhamento (_) são sensíveis à caixa (MyVar e Myvar são variáveis diferentes) que os nomes não podem conter Whitespaces ouPersonagens especiais como!, #, %, etc. Palavras reservadas (como int) não podem ser usadas como nomes"

utter_Obtenha_o_tamanho_da_memória:
  - text: "Introduzimos no capítulo dos tipos de dados de que o tamanho da memória de uma variável varia dependendo do tipo: tamanho do tipo de dados Int 2 ou 4 bytes flutuantes 4 bytes duplos 8 bytes char 1 bytethe size refere -se a quanto espaço um tipo ocupa no computadorMemória .Para realmente obter o tamanho (em bytes) de um tipo de dados ou variável, use o tamanho do operador: exemplo int myint;flutuar myfloat;duplo mydouble;char mychar;printf (%lu \ n, sizeof (myint));printf (%lu \ n, sizeof (myfloat));printf (%lu \ n, sizeof (myDouble));printf (%lu \ n, sizeof (mychar));Experimente você mesmo »Observe que usamos o Formato %LU específica para imprimir o resultado, em vez de %d.Isso ocorre porque o compilador espera que o tamanho do operador retorne um Int ( %LU) longo), em vez de int ( %d).Em alguns computadores, pode funcionar com %D, mas é mais seguro usar %Lu.Por que devo saber o tamanho dos tipos de dados?O uso do tipo de dados certo para o objetivo certo salvará a memória e melhorará o desempenho do seu programa.Você aprenderá mais sobre o tamanho do operador mais tarde neste tutorial e como usá -lo em diferentes cenários.Entrar Inscrever-se"

utter_Constantes:
  - text: "Se você não deseja que os outros (ou a si mesmo) alterem os valores da variável existente, você pode usar a palavra-chave const. Isso declarará a variável como constante, o que significa imutável e somente leitura: exemplo const int mynum = 15;// mynum sempre terá 15 mynum = 10;// erro:  atribuição de variável somente leitura 'mynum' experimente você mesmo »Você sempre deve declarar a variável como constante quando você tem valores que é improvável que mude: exemplo const int miniensperhour = 60;const float pi = 3,14;Tente você mesmo "

utter_Notas_sobre_constantes:
  - text: "Quando você declara uma variável constante, ela deve ser atribuída com um valor: Exemplo como este: const Int MiniensperHour = 60;No entanto, isso não funcionará: const int Minightperhour;Mininsperhour = 60;// Erro tente você mesmo »"

utter_Boa_prática:
  - text: "Outra coisa sobre variáveis constantes é que é considerado uma boa prática declará -las com maiúsculas. Não é necessária, mas útil para a legibilidade do código e comum para programadores C: Exemplo const int birthYear = 1980;Tente você mesmo "

utter_C_exercícios_7:
  - text: "Teste -se com exercícios Exercício: verifique se o valor da seguinte variável não é possível alterar: int hoursperday = 24;Envie Resposta »Comece o exercício"

utter_Teste_-se_com_exercícios_7:
  - text: "Exercício: verifique se o valor da seguinte variável não é possível alterar: int hoursperday = 24;Envie Resposta »Comece o exercício"

utter_Exercício__7:
  - text: "Certifique -se de que o valor da seguinte variável não seja possível alterar: int hoursperday = 24; enviar resposta »Inicie o exercício"

utter_Condições_e_declarações_se:
  - text: "Você já aprendeu que C suporta as condições lógicas usuais da matemática: menor que: a <b menor ou igual a: a <= b maior que: a> b maior ou igual a: a> = b igual a a == b não igual a: a! = byou pode usar essas condições para executar ações diferentes para diferentes decisões.C possui as seguintes declarações condicionais: use se para especificar um bloco de código a ser executado, se uma condição especificada for um uso verdadeiro para outros paraEspecifique um bloco de código a ser executado, se a mesma condição for Falsa Uso else se especificar uma nova condição a ser testada, se a primeira condição for falsa Uso Switch para especificar muitos blocos alternativos de código a serem executados"

utter_A_declaração_if:
  - text: "Use a instrução if para especificar um bloco de código a ser executado se uma condição for verdadeira .syntax if (condição) {// bloco de código a ser executado se o  A condição é verdadeira} Observe que se estiver em letras minúsculas.Letras maiúsculas (se ou se) gerarão um erro. No exemplo abaixo, testamos dois valores para descobrir se 20 é maior que18. Se a condição for verdadeira, imprima algum texto: exemplo se (20> 18) {printf (20 for maior que 18);} Experimente você mesmo »Também podemos testar variáveis: exemplo int x = 20;int y = 18;if (x> y) {printf (x é maior que  y );} tente você mesmo» Exemplo explicado no exemplo acima, usamos duas variáveis, x e y,Para testar se X é maior que Y(usando o operador>).Como X é 20 e Y 18, e sabemos que 20 é maior que 18, imprimimos na tela que X é maior que Y."

utter_C_exercícios_8:
  - text: "Teste -se com exercícios Exercício: Imprima Hello World se X for maior que Y.int x = 50;int y = 10;(x y) {  printf (Hello World);} Enviar resposta »Inicie o exercício"

utter_Teste_-se_com_exercícios_8:
  - text: "Exercício: Imprima Hello World se X for maior que Y.int x = 50;int y = 10;(x y) {  printf (Hello World);} Enviar resposta »Inicie o exercício"

utter_Exercício__8:
  - text: "Imprima Hello World se x for maior que y .int x = 50;int y = 10;(x y) {  printf (Hello World);} Enviar resposta »Inicie o exercício"

utter_A_declaração_else:
  - text: "Use a instrução else para especificar um bloco de código a ser executado se a condição for falsa .syntax if (condição) {// bloco de código a ser executado se o  condição é verdadeira} else {// bloco de código a ser executado  se a condição for falsa} exemplo int time = 20;if (tempo <18) {printf (bom dia);} else {printf (Boa noite);} // Saídas Boa noite.Experimente você mesmo »Exemplo explicado no exemplo acima, o tempo (20) é maior que 18, então a condição é falsa.Por causa disso, passamos para a condição else e imprimimos para a tela bomà noite . Se a hora fosse menor que 18, o programa imprimiria Good Day ."

utter_O_else_if_declaração:
  - text: "Use a instrução IF para especificar uma nova condição se a primeira condição for falsa .syntax if (condition1) {// bloco de código a ser executado se  condição1 é verdadeiro} else if (condition2) {// bloco de  Código a ser executado se a condição1 for falsa e condição2 for verdadeira} else {// bloco de código a ser executado se a condição1 for falsa  e condição2 é falso} exemplo int time = 22;if (tempo <10) {printf (bom dia);} else if (horário <20) {printf (bom dia);} else {printf (Boa noite);} // Saídas Boa noite.Experimente você mesmo »Exemplo explicado no exemplo acima, o tempo (22) é maior que 10; portanto, a primeira condição é falsa.A próxima condição, na declaração se também é falsa, por isso passamos para a condição else, já que a condição1 e a condição2 é falsa - e imprimir na tela bomà noite ."

utter_Declaração_de_interruptor:
  - text: "Em vez de escrever muitas declarações se ... else, você pode usar a instrução SWITCH. A instrução Switch seleciona um dos muitos blocos de código a serem executados: switch de sintaxe (expressão) {case x: // código  quebra de bloco;caso y: // interrupção do bloco de código;padrão: // bloco de código} é assim que funciona: a expressão do interruptor é avaliada quando o valor da expressão é comparado com os valores de cada caso, se houver uma correspondência, o bloco associado do código é executado.dotrocar de bloco e interromper a execução A instrução padrão é opcional e especifica algum código para executar se lá  não é correspondência de caso O exemplo abaixo usa o número do dia da semana para calcular o nome da semana: exemplo int dia = 4;switch (dia) {case 1: printf (segunda -feira);quebrar;Caso 2: printf (Terça -feira);quebrar;Caso 3: printf (quarta -feira);quebrar;Caso 4: Printf (Quinta -feira);quebrar;Caso 5: printf (sexta -feira);quebrar;Caso 6: printf (Sábado);quebrar;Caso 7: printf (domingo);quebrar;} // saídas Quinta -feira (dia 4) Experimente você mesmo »"

utter_A_palavra_-chave_quebrada:
  - text: "Quando C atingir uma palavra -chave quebrada, ele sai do bloco de comutação. Isso interromperá a execução de mais código e teste de caso dentroo bloco. Quando uma partida é encontrada e o trabalho é feito, é hora de uma pausa.Não há necessidade de mais testes. Uma quebra pode economizar muito tempo de execução, porque ignora a execuçãode todo o restante do código no bloco de comutação."

utter_A_palavra_-chave_padrão:
  - text: "A palavra -chave padrão especifica algum código a ser executado se não houverCaso correspondente: exemplo int dia = 4;Switch (dia) {Caso 6: printf (Hoje é  Sábado ); Break; Caso 7: Printf ( Hoje é domingo ); Break; Padrão: Printf ( Ansioso pelo fim de semana );} // Saia Ansioso pelo fim de semana Experimente você mesmo» Nota:A palavra -chave padrão deve ser usada como a última declaraçãono interruptor, e não precisa de uma pausa."

utter_C_exercícios_9:
  - text: "Teste -se com exercícios Exercício: Insira as peças ausentes para concluir a seguinte instrução Switch: int Day = 2;switch () {1:    printf (segunda -feira);;2:    printf (domingo);;} Enviar resposta »Inicie o exercício"

utter_Teste_-se_com_exercícios_9:
  - text: "Exercício: Insira as peças ausentes para concluir a seguinte instrução Switch: int Day = 2;switch () {1:    printf (segunda -feira);;2:    printf (domingo);;} Enviar resposta »Inicie o exercício"

utter_Exercício__9:
  - text: "Insira as peças ausentes para concluir a seguinte instrução Switch: int Day = 2;switch () {1:    printf (segunda -feira);;2:    printf (domingo);;} Enviar resposta »Inicie o exercício"

utter_rotações:
  - text: "Os loops podem executar um bloco de código enquanto uma condição especificada for atingida. Os loops são úteis porque economizam tempo, reduzem erros e tornam o código mais legível."

utter_Enquanto_loop:
  - text: "O loop while loop através de um bloco de código, desde que uma condição especificada seja verdadeira: sintaxe enquanto (condição) {// bloco de código a ser executado} No exemplo abaixo, o código no loop será executado repetidamente,desde queUma variável (i) é menor que 5: exemplo int i = 0;enquanto (i <5) {printf (%d \ n, i);i ++;} Experimente você mesmo »Nota: Não se esqueça de aumentar a variável usada na condição(i ++), caso contrárioO loop nunca vai acabar!"

utter_C_exercícios_10:
  - text: "Teste -se com exercícios Exercício: Imprimir i, desde que eu seja menor que 6: int i = 1;(i <6) {  printf (%d \ n, i);;} Enviar resposta »Inicie o exercício"

utter_Teste_-se_com_exercícios_10:
  - text: "Exercício: Impressão i Enquanto eu for menor que 6: int i = 1;(i <6) {  printf (%d \ n, i);;} Enviar resposta »Inicie o exercício"

utter_Exercício__10:
  - text: "Imprima i enquanto eu for menor que 6: int i = 1;(i <6) {  printf (%d \ n, i);;} Enviar resposta »Inicie o exercício"

utter_O_loop_do_Do/While:
  - text: "O loop DO/While é uma variante do loop while.Este loop vaiexecutar o bloco de código uma vez, antes de verificar se a condição for verdadeira, então seráRepita o loop, desde que a condição seja verdadeira.Syntax Do {// Bloco de código a ser executado} while (condição); o exemplo abaixo usa um loop DO/While.O loop sempre seráexecutado pelo menos uma vez, mesmo que a condição seja falsa, porque o bloco de códigoé executado antes que a condição seja testada: exemplo int i = 0;do {printf (%d \ n, i);i ++;} while (i <5);Experimente você mesmo »Não se esqueça de aumentar a variável usada na condição, caso contrárioO loop nunca vai acabar!"

utter_Para_loop:
  - text: "Quando você sabe exatamente quantas vezes você deseja percorrer um bloco deCódigo, use o loop for em vez de um loop de tempo: sintaxe para (expressão 1; expressão 2; expressão 3) {// bloco de código a ser executado} A expressão 1 é executada (uma vez) antes da execução do bloco de código. Expressão2 Define a condição para executar o bloco de código. A expressão 3 é executada (sempre) após a execução do bloco de código. O exemplo abaixo imprimirá os números 0 a 4: Exemplo Int I;for (i = 0; i <5; i ++) {printf (%d \ n,  eu);} Experimente você mesmo »Exemplo explicado Expressão 1 Define uma variável antes do início do loop (int i = 0). Expressão 2 Define a condição para a execução do loop (devo ser menor que5).Se a condição for verdadeira, o loop começará de novo, se for falso,o loop acabará. A expressão 3 aumenta um valor (i ++) cada vez que o bloco de código no loop temfoi executado."

utter_C_exercícios_11:
  - text: "Teste -se com exercícios Exercício: use um loop para imprimir sim 5 vezes: (int i = 0; i <5;) {  printf (Sim \ n);} Enviar resposta »Inicie o exercício"

utter_Teste_-se_com_exercícios_11:
  - text: "Exercício: use um loop para imprimir sim 5 vezes: (int i = 0; i <5;) {  printf (Sim \ n);} Enviar resposta »Inicie o exercício"

utter_Exercício__11:
  - text: "Use um loop para imprimir sim 5 vezes: (int i = 0; i <5;) {  printf (Sim \ n);} Enviar resposta »Inicie o exercício"

utter_Loops_aninhados:
  - text: "Também é possível colocar um loop dentro de outro loop.Isso é chamado de loop aninhado. O loop interno será executado uma vez para cada iteração do loop externo: exemplo int i, j;// loop externo para (i = 1; i <= 2; ++ i) {printf (externo:  %d \ n , i); // executa 2 vezes // loop interno para (j = 1; j <= 3; ++ j) {printf ( interno: %d \ n , j); //Executa 6 vezes (2 * 3)}} Experimente você mesmo »"

utter_Quebrar:
  - text: "Você já viu a declaração de quebra usada em um capítulo anterior deste tutorial.Foi usado para pular de uma declaração de interruptor. A declaração de interrupção também pode ser usada para pular de um loop. Este exemplo salta do loop for quando eu é igual a 4: exemplo int i;for (i = 0; i <10; i ++) {if (i == 4) {break;} printf (%d \ n, i);} Tente você mesmo "

utter_Continuar:
  - text: "A declaração continua quebra uma iteração (no loop), se ocorrer uma condição especificada e continuar com a próxima iteração no loop.Este exemplo pula o valor de 4: exemplo int i;for (i = 0; i <10; i ++) {if (i == 4) {continue;} printf (%d \ n, i);} Tente você mesmo "

utter_Quebre_e_continue_enquanto_loop:
  - text: "Você também pode usar o intervalo e continuar enquanto loops: break Exemplo int i = 0;while (i <10) {if (i == 4) {break;} printf (%d \ n, i);i ++;} Experimente você mesmo »Continue exemplo int i = 0;while (i <10) {if (i == 4) {i ++;continuar;} printf (%d \ n, i);i ++;} Tente você mesmo "

utter_C_exercícios_12:
  - text: "Teste -se com exercícios exercícios: pare o loop se eu for 5. para (int i = 0; i <10; i ++) {  if (i == 5) {;  }  printf (%d \ n, i);} Enviar resposta »Inicie o exercício"

utter_Teste_-se_com_exercícios_12:
  - text: "Exercício: pare o loop se eu for 5. para (int i = 0; i <10; i ++) {  if (i == 5) {;  }  printf (%d \ n, i);} Enviar resposta »Inicie o exercício"

utter_Exercício__12:
  - text: "Pare o loop se eu for 5. para (int i = 0; i <10; i ++) {  if (i == 5) {;  }  printf (%d \ n, i);} Enviar resposta »Inicie o exercício"

utter_Cordas:
  - text: "As strings são usadas para armazenar texto/caracteres. Por exemplo, Hello World é uma sequência de caracteres.Em vez disso, você deve usar o tipo de char e criarUma variedade de caracteres para fazer uma string em C: CHAR cumprimentos [] = Hello World!; Observe que você precisa usar aspas duplas () .Para a saída da string, você pode usar a função printf () juntamente com a função junto comO especificador de formato %s para dizer a C que agora estamos trabalhando com strings: exemplo char saudações [] = Hello World!;printf (%s, saudações);Tente você mesmo "

utter_Strings_de_acesso:
  - text: "Como as strings são na verdade matrizes em C, você pode acessar uma string referindo -se ao seu número de índice dentro de colchetes quadrados [] .Este exemplo imprime o primeiro caractere (0) em cumprimentos: Exemplo Char Greetings [] = Hello World!;printf (%c, saudações [0]);Experimente você mesmo »Observe que precisamos usar o especificador de formato %C para imprimir um único caractere."

utter_Modificar_strings:
  - text: "Para alterar o valor de um caractere específico em uma string, consulte o número do índice e use citações únicas: Exemplo Char Greetings [] = Hello World!;Saudações [0] = 'J';printf (%s, saudações);// produz Jello World!em vez de olá  Mundo!Tente você mesmo "

utter_Loop_através_de_uma_corda:
  - text: "Você também pode percorrer os personagens de uma string,Usando um loop: exemplo char carname [] = Volvo;int i;for (i = 0; i <5; ++ i) {printf (%c \ n, carname [i]);} Experimente você mesmo »e, como especificamos no capítulo das matrizes, você também pode usar a fórmula de tamanho de (em vez de manualmenteEscreva o tamanho da matriz na condição de loop (i<5)) para tornar o loop mais sustentável: exemplo char carname [] = Volvo;int length = sizeof (carname) /  sizeof (carname [0]);int i;for (i = 0; i <comprimento; ++ i) {printf (%c \ n, carname [i]);} Tente você mesmo "

utter_Outra_maneira_de_criar_cordas:
  - text: "Nos exemplos acima, usamos uma string literal para criar uma stringvariável.Esta é a maneira mais fácil de criar uma string em C.Você também deve observar que pode criar uma string com um conjunto de caracteres.Este exemplo iráProduza o mesmo resultado que o exemplo no início desta página: Exemplo Char cumprimentos [] = {'h', 'e', 'l', 'l', 'o', '', 'w', 'o',' r ',' l ',' d ',  '!', '\ 0'};printf (%s, saudações);Experimente você mesmo »Por que incluímos o caractere \ 0 no final?Isso éconhecido como caráter nulo de terminação e deve ser incluído ao criarStrings usando este método.Diz a C que este é o fim da string."

utter_Diferenças:
  - text: "A diferença entre as duas maneiras de criar cordas é que o primeiro método é mais fácilpara escrever, e você não precisa incluir o personagem \ 0, como C fará isso porvocê. Você deveriaObserve que o tamanho de ambas as matrizes é o mesmo: ambos têm 13 caracteres (o espaço também conta como personagem), incluindo o personagem \ 0: exemplo char cumprimentos [] = {'h', 'e', 'l ',' l ',' o ',' ',' w ',' o ',' r ',' l ',' d ',  '!', '\ 0'};CHAR GERETINGS2 [] = Hello World!;printf (%lu \ n,  tamanho de (saudações));// produz 13 printf (%lu \ n,  sizeof (cumprimentos2));// saídas 13 Experimente você mesmo »"

utter_Exemplo_da_vida_real:
  - text: "Use strings para criar uma mensagem de boas -vindas simples: Exemplo Char Mensagem [] = Bom vê -lo;char fname [] = John;printf (%s  %s! , mensagem, fname); tente você mesmo»"

utter_C_exercícios_13:
  - text: "Teste -se com exercícios Exercício: Preencha a parte que faltava para criar uma string chamada Greetings e atribua o valor Hello.=;Envie Resposta »Comece o exercício"

utter_Teste_-se_com_exercícios_13:
  - text: "Exercício: Preencha a parte que faltava para criar uma string chamada saudações e atribua o valor Hello.=;Envie Resposta »Comece o exercício"

utter_Exercício__13:
  - text: "Preencha a parte que faltava para criar uma string chamada cumprimentos e atribua o valor hello. =; Envie a resposta »Inicie o exercício"

utter_Obtenha_tamanho_ou_comprimento_da_matriz:
  - text: "Para obter o tamanho de uma matriz, você pode usar o Sizeof Operator: Exemplo de MyNumbers [] = {10, 25, 50, 75, 100};printf (%lu, sizeof (mynumbers));//  Impressões 20 Experimente você mesmo »Por que o resultado mostrou 20 em vez de 5, quando a matriz contém 5 elementos?- é porque o tamanho do operador retorna o tamanho de um tipo em bytes. Você aprendeu com o capítulo dos tipos de dados que um tipo int tipoé geralmente 4 bytes, então do exemplo acima, 4 x 5(4 bytes x 5 elementos) = 20 bytes. O tamanho da memória de uma matriz é ótimo quando você está trabalhandoprogramas maiores que exigem um bom gerenciamento de memória. Mas quando você deseja descobrir quantos elementos uma matriz possui, você pode usar a seguinte fórmula (que divide o tamanho da matriz pelo tamanho de um elemento de matriz): Exemplo de mynumbers [] = {10, 25, 50, 75, 100};int length = sizeof (mynumbers) /  sizeof (mynumbers [0]);printf (%d, comprimento);// imprime 5 Experimente você mesmo »"

utter_Fazendo_melhores_loops:
  - text: "Na seção Loops de matriz no capítulo anterior, escrevemos o tamanho da matriz na condição de loop (i<4).Isso não é ideal, pois só funcionará para matrizes de tamanho especificado.: Exemplo int mynumbers [] = {25, 50, 75, 100};int i;para (i = 0; i <4; i ++)  {printf (%d \ n, mynumbers [i]);} Experimente você mesmo »É melhor escrever: exemplo int mynumbers [] = {25, 50, 75, 100};int length = sizeof (mynumbers)  / sizeof (mynumbers [0]);int i;para (i = 0; i <  comprimento;i ++)  {printf (%d \ n, mynumbers [i]);} Tente você mesmo "

utter_Strings_-_personagens_especiais:
  - text: "Como as cordas devem ser escritas dentro das citações, C entenderá mal esta string,e gerar um erro: char txt [] = Somos os chamados vikings do norte.; A solução para evitar esse problema é usar o personagem de escape de barra de barragem. A barra de barro (\) de escape gira especialcaracteres em caracteres da string: escape de caracteres descrição \ '' citação única \  citação dupla \\ \ backslashthe sequência \ insere uma cotação dupla em uma string: exemplo char txt [] = somos os chamados \ vikings\ Do norte.; Experimente você mesmo »A sequência \ 'insere uma única citação em uma string: exemplo char txt [] = It \' S.barragem em uma string: exemplo char txt [] = o caractere \\ é chamado de barraele »\ 0 NULL Experimente» ❮ Anterior Próximo ❯ ★ +1 W3Schools Pathfinder Rastrear seu progresso - é grátis! Login"

utter_Entrada_do_usuário:
  - text: "Você já aprendeu que o printf () é usado para produzir valores de saída em c.Para obter a entrada do usuário, você pode usar a função scanf (): Exemplo de saída um número inserido pelo usuário: // criar uma variável inteira que armazenará o númeroRecebemos do usuário int mynum;// Peça ao usuário que digite um número Printf (Tipo um número:  \ n ); // obtenha e salve o número que os tipos de usuário scanf ( %d , & mynum); // produzem o número que o usuário digitou printf ( Seu número é: %d , mynum); Exemplo de execução»A função scanf () leva dois argumentos: o especificador de formato da variável ( %d no exemplo acima) e oOperador de referência (& mynum), que armazena o endereço de memória da variável.Dica: você aprenderá mais sobre endereços e funções de memória no próximo capítulo."

utter_Múltiplas_entradas:
  - text: "A função scanf () também permite múltiplasEntradas (um número inteiro e um caractere no exemplo a seguir): Exemplo // Crie uma variável int e char int mynum;char mychar;// Peça ao usuário que digite um número e um caractere printf (Tipo um número e  um personagem e pressione Enter: \ n ); // obtenha e salve o número e  personagem o usuário tipos scanf ( %d %c, & mynum, & mychar);// Imprimir  o número printf (Seu número é: %d \ n, mynum);// imprima o  Printf de caractere (Seu personagem é: %C \ n, mychar);Exemplo de execução »"

utter_Pegue_a_entrada_da_string:
  - text: "Você também pode obter uma string inserida pelo usuário: Exemplo de saída o nome de um usuário: // criar uma string char FirstName [30];// Peça ao usuário para inserir alguns  texto printf (Digite seu primeiro nome: \ n);// Obtenha e salve o texto Scanf (%s, primeiro nome);// em saída o texto printf (hello %s,  primeiro nome);Exemplo de execução »Nota: Ao trabalhar com strings em scanf (), você deve especificar o tamanho dea corda/matriz (usamos um número muito alto, 30 em nosso exemplo, mas pelo menos então somoscom certeza que armazenará personagens suficientes para o primeiro nome), e você não temPara usar o operador de referência (&) .Como, a função scanf () tem algumas limitações: considera o espaço (espaço em branco,guias, etc) como um personagem terminante, o que significa que ele só pode exibir umPalavra única (mesmo se você digitar muitas palavras).Por exemplo: Exemplo Char FullName [30];printf (Digite seu nome completo: \ n);scanf (%s, & fullName);printf (Hello %s,  nome completo);// Digite seu nome completo: John Doe // Olá, John do exemplo acima, você esperaria que o programa imprimisse John Doe, mas ele apenas imprime John. É por isso() Função para ler uma linha de texto.Observe que você deve incluir o seguinteArgumentos: o nome da variável string, sizeof (string_name) e stdin: exemplo char fullname [30];printf (Digite seu nome completo: \ n);fgets (fullname, sizeof (fullname), stdin);printf (Hello %s,  nome completo);// Digite seu nome completo: John Doe // Hello John Doe Run Exemplo »Use a função scanf () para obter uma única palavra como entrada e use fgets () para várias palavras.❮ Anterior ❯ ❯ ★ +1 W3Schools Pathfinder Track Pathfinder TrackSeu progresso - é grátis!Entrar Inscrever-se"

utter_Endereço_de_memória:
  - text: "Quando uma variável é criada em C, um endereço de memória é atribuído à variável. O endereço de memória é olocalização de onde a variável é armazenada no computador. Quando atribuímos um valor à variável, ela é armazenada nesta memóriaendereço. Para acessar, use a referênciaoperador (&) e o resultado representa onde a variável é armazenada: exemplo int myage = 43;printf (%p, & myage);// Saídas 0x7FFE5367E044 Experimente você mesmo »Nota: O endereço da memória está na forma hexadecimal (0x ..).VocêProvavelmente não terá o mesmo resultado em seu programa, pois isso depende de ondeA variável é armazenada no seu computador. Você também deve observar que e Myage é frequentemente chamado de ponteiro.Um ponteiro armazena basicamente o endereço de memória de uma variável como seu valor.Para imprimir valores de ponteiro,Usamos o especificador de formato %P. Você aprenderá muito mais sobre os ponteiros no próximo capítulo. Por que é útil conhecer o endereço de memória?Os ponteiros são importantes em C, porque nos permitem manipular os dados na memória do computador - isso pode reduzir o código e melhorar o desempenho.Ponteiros são uma das coisas que fazem C se destacar de outros  Linguagens de programação, como Python e Java .❮ Anterior Próximo ❯ ★ +1 W3schools Pathfinder rastreia seu progresso - é grátis!Entrar Inscrever-se"

utter_Funções_de_string:
  - text: "C também possui muitas funções úteis de string, que podem ser usadas para executarCertas operações em strings."

utter_Comprimento_da_corda:
  - text: "Por exemplo, para obter o comprimento de uma string, você pode usar a função strlen (): exemplo char alphabet [] = abcdefghijklmnopqrstuvwxyz;printf (%d,  strlen (alfabeto));Experimente você mesmo »No capítulo Strings, usamos sizeof para obter o tamanho de uma string/matriz.Observe que o tamanho de Strlen se comporta de maneira diferente, pois o tamanho de também inclui o caractere \ 0Ao contar: Exemplo de char alfabet [] = abcdefghijklmnopqrstuvwxyz;printf (%d,  strlen (alfabeto));// 26 printf (%d,  sizeof (alfabeto));// 27 Experimente você mesmo »Também é importante que você saiba que o tamanho de sempre retornará o tamanho da memória (em bytes), e não o realComprimento da string: exemplo char alfabet [50] = abcdefghijklmnopqrstuvwxyz;printf (%d,  strlen (alfabeto));// 26 printf (%d, sizeof (alfabeto));//  50 Experimente você mesmo »"

utter_Cordas_concatenadas:
  - text: "Para concatenar (combinar) duas cordas, você pode usar a função strcat (): exemplo char str1 [20] = hello;char str2 [] = mundo!;//  Concatenar  STR2 a STR1 (resultado é armazenado no STR1) STRCAT (STR1, STR2);//  Imprima str1 printf (%s, str1);Experimente você mesmo »Observe que o tamanho do STR1 deve ser grande o suficiente para armazenar o resultado doDuas cordas combinadas (20 em nosso exemplo)."

utter_Copiar_strings:
  - text: "Para copiar o valor de uma string para outra, você pode usar a função strcpy (): exemplo char str1 [20] = hello world!;CHAR STR2 [20];// copie str1 para str2 strcpy (str2, str1);// print str2 printf (%s, str2);Experimente você mesmo »Observe que o tamanho do STR2 deve ser grandeO suficiente para armazenar a corda copiada (20 em nosso exemplo)."

utter_Compare_strings:
  - text: "Para comparar duas strings, você pode usar a função strcmp ().char str2 [] = Olá;char str3 [] = oi;// Compare Str1 e Str2 e imprima o resultado printf (%d \ n,  STRCMP (STR1, STR2));// retorna 0 (as cordas são iguais) //  Compare STR1 e STR3 e imprima o resultado printf (%d \ n, strcmp (str1, str3));// retorna -4 (as cordas não são  igual) tente você mesmo »❮ Anterior Próximo ❯ ★ +1 W3schools Pathfinder Rastreie seu progresso - é grátis!Entrar Inscrever-se"

utter_Criando_indicadores:
  - text: "Você aprendeu com o capítulo anterior, que podemos obter a memóriaendereço de uma variável com a referênciaoperador &: exemplo int myage = 43;// uma variável int Printf (%d, myage);//    Produz o valor de Myage (43) printf (%p, & myage);// produz o    Endereço de memória de Myage (0x7ffe5367e044) Experimente você mesmo »Um ponteiro é uma variável que armazena o endereço de memória de outra variável como seu valor. Uma variável de ponteiro aponta para um tipo de dados (como int) da mesmadigite, e é criado com o * operador. O endereço da variável com quem você está trabalhando é atribuído ao ponteiro: Exemplo int myage = 43;// uma variável int int* ptr =    &minha idade;// uma variável de ponteiro, com o nome PTR, que    armazena o endereço de Myage // em saída o valor de Myage (43) printf (%d \ n, myage);// Saída    o endereço de memória de Myage (0x7ffe5367e044) printf (%p \ n, & myage);//    Saia o endereço de memória do Myage com o ponteiro (0x7ffe5367e044) printf (%p \ n, ptr);Experimente você mesmo »Exemplo explicou uma variável de ponteiro com o nome PTR, que aponta para uma variável int (Myage).Observe que o tipo de ponteiro deve corresponder ao tipo de variável que vocêTrabalhando com (int em nosso exemplo) .Use o Operador para armazenar o endereço de memória da variável Myage e atribui -la ao ponteiro. Agora, o PTR mantém o valor do endereço de memória de Myage."

utter_Desreferência:
  - text: "No exemplo acima, usamos a variável de ponteiro para obter o endereço de memória de uma variável (usada junto com o operador de referência). Você também pode obter o valor da variável que o ponteiro aponta, usando o * operador (a desreferênciaoperador): exemplo int myage = 43;// declaração variável int* ptr = & myage;// ponteiro    Declaração // Referência: Saia o endereço de memória do Myage com o    ponteiro (0x7ffe5367e044) printf (%p \ n, ptr);// Dereference:    Saia o valor de Myage com o ponteiro (43) printf (%d \ n, *ptr);Experimente você mesmo »Observe que o * sinal pode ser confuso aqui, pois faz duas coisas diferentesEm nosso código: quando usado na declaração (int* ptr), ele cria uma variável de ponteiro.Quando não é usado em declaração, ele atua como um operador de dereferência.É bom saber: existem duas maneiras de declarar ponteirovariáveis em c: int* mynum;int *mynum;Notas sobre ponteiros Ponteiros são uma das coisas que fazem C se destacar de outros  linguagens de programação, como Python e Java.Eles são importantes em C, porque nos permitem manipular os dados na memória do computador.Isso pode reduzir o código e melhorar o desempenho.Se você está familiarizado comEstruturas de dados como listas, árvores e gráficos, você deve saber que os ponteiros sãoespecialmente útil para implementá -los.E às vezes você tem que usarPonteiros, por exemplo, ao trabalhar com arquivos.Mas tenha cuidado ;Os ponteiros devem ser tratados com cuidado, pois é possível danificar os dados armazenados em outros endereços de memória."

utter_C_exercícios_14:
  - text: "Teste -se com exercícios Exercício: Crie uma variável de ponteiro chamada PTR, que aponta para a variável int variável: int myage = 43;= & Myage Enviar Resposta »Comece o exercício"

utter_Teste_-se_com_exercícios_14:
  - text: "Exercício: Crie uma variável de ponteiro chamado PTR, que aponta para a variável int variável: int myage = 43;= & Myage Enviar Resposta »Comece o exercício"

utter_Exercício__14:
  - text: "Crie uma variável de ponteiro chamada PTR, que aponta para a variável int Myage: int myage = 43;= & MyagesubMit Resposta »Comece o exercício"

utter_Matrizes:
  - text: "Matrizes são usadas para armazenar vários valores em uma única variável, em vez de declarar variáveis separadas para cadavalue.para criar uma matriz, definir o tipo de dados (como int) e especificar o nomeda matriz seguida de colchetes [] .Para inserir valores nela, use uma lista separada por vírgula, dentro do aparelho encaracolado: int mynumbers [] = {25,  50, 75, 100}; agora criamos uma variável que contém uma matriz de quatro números inteiros."

utter_Acesse_os_elementos_de_uma_matriz:
  - text: "Para acessar um elemento de matriz, consulte seu número de índice. Os índices de areio começam com 0: [0] é o primeiro elemento.[1] é o segundo elemento, etc. Esta instrução acessa o valor do primeiro elemento [0] em Mynumbers: Exemplo int myNumbers [] = {25, 50, 75, 100};printf (%d, mynumbers [0]);// saídas 25 Experimente você mesmo »"

utter_Alterar_um_elemento_de_matriz:
  - text: "Para alterar o valor de um elemento específico, consulte o número do índice: exemplo mynumbers [0] = 33; exemplo int mynumbers [] = {25, 50, 75, 100};myNumbers [0] = 33;printf (%d, mynumbers [0]);// Agora produz 33 em vez de 25 experimente você mesmo »"

utter_Loop_através_de_uma_matriz:
  - text: "Você pode percorrer os elementos da matriz com o loop for. O exemplo a seguir produz todos os elementos na matriz MyNumbers: Exemplo de MyNumbers [] = {25, 50, 75, 100};int i;para (i = 0; i <4; i ++)  {printf (%d \ n, mynumbers [i]);} Tente você mesmo "

utter_Defina_o_tamanho_da_matriz:
  - text: "Outra maneira comum de criar matrizes é especificar o tamanho da matriz e adicionarElementos mais tarde: Exemplo // Declare uma matriz de quatro números inteiros: int mynumbers [4];// Adicionar  Elementos MyNumbers [0] = 25;MyNumbers [1] = 50;MyNumbers [2] = 75;MyNumbers [3] = 100;Experimente você mesmo »Usando esse método, você deve saber o número de elementos de matriz com antecedência, para que o programa armazenasse memória suficiente. Você não pode alterar o tamanho da matriz após a criação."

utter_C_exercícios_15:
  - text: "Teste -se com exercícios Exercício: Crie uma variedade de tipos chamados MyNumbers.{25, 50, 75, 100};Envie Resposta »Comece o exercício"

utter_Teste_-se_com_exercícios_15:
  - text: "Exercício: Crie uma variedade de tipos int chamada MyNumbers.{25, 50, 75, 100};Envie Resposta »Comece o exercício"

utter_Exercício__15:
  - text: "Crie uma variedade de tipos int chamada mynumbers. {25, 50, 75, 100}; enviar resposta »Inicie o exercício"

utter_Funções_predefinidas:
  - text: "Acontece que você já sabe o que é uma função.Você tem usado o tempo todoEnquanto estuda este tutorial! Por exemplo, Main () é uma função, que é usada para executar o código,e printf () é uma função;usado para produzir/imprimir texto na tela: exemplo int main () {printf (Hello World!);retornar 0;} Tente você mesmo "

utter_Criar_uma_função:
  - text: "Para criar (frequentemente referido como declarar) sua própria função, especifique o nome da função, seguido por parênteses () e colchetes encaracolados {}: sintaxe void myfunction () {// Código a ser executado} Exemplo explicado myfunction () é onome da função vazia significa que a função não tem umvalor de retorno.Você aprenderá mais sobre os valores de retorno posteriormente no próximo capítulo dentro da função (o corpo), adicione código que define o que a função deve fazer"

utter_Chame_uma_função:
  - text: "As funções declaradas não são executadas imediatamente.Eles são salvos para mais tardeuse , e será executado quando forem chamados.Quando é chamado: Exemplo dentro de Main,ligue para myfunction (): // Crie uma função void myfunction () {printf (Acabei de ficar  executado! );} int main () {myfunction (); // Chame a função retornar 0;} // Saídas  Acabei de ser executado!Experimente você mesmo »Uma função pode ser chamada várias vezes: exemplo void myfunction () {printf ( Acabei de ser executado! );} int main () {myfunction ();myfunction ();myfunction ();retornar 0;} //  Acabei de ser executado!// Acabei de ser executado!// Acabei de ser executado!Tente você mesmo "

utter_C_exercícios_16:
  - text: "Teste -se com exercícios Exercício: Crie um método chamado MyFunction e chame -o dentro de Main ().vazio {  printf (Acabei de ser executado!);}int main () {return 0;} Enviar resposta »Inicie o exercício"

utter_Teste_-se_com_exercícios_16:
  - text: "Exercício: Crie um método chamado MyFunction e chame -o dentro de Main ().vazio {  printf (Acabei de ser executado!);}int main () {return 0;} Enviar resposta »Inicie o exercício"

utter_Exercício__16:
  - text: "Crie um método chamado MyFunction e chamá -lo dentro de Main () .Void {  printf (Acabei de ser executado!);}int main () {return 0;} Enviar resposta »Inicie o exercício"

utter_Parâmetros_e_argumentos:
  - text: "As informações podem ser passadas para funções como um parâmetro.Os parâmetros agem comovariáveis dentro da função. Os parâmetros são especificados após o nome da função, dentro dos parênteses.Você pode adicionar quantos parâmetros quiser, basta separá -los com uma vírgula: sintaxe ReturnType FunctionName (Parameter1, Parameter2, Parameter3) {// Código a ser executado} A seguinte função que leva uma sequência de caracteres com nome como nome comoparâmetro.Quando a função é chamada, passamos por um nome, que é usadoDentro da função para imprimir Hello e o nome de cada pessoa. Exemplo de void myfunction (nome do char []) {printf (hello %s \ n, nome);} int main () {myfunction (liam);MyFunction (Jenny);MyFunction (Anja);retornar 0;} // Olá Liam // Olá Jenny // Olá Anja Experimente você mesmo »Quando um parâmetro é passado para a função, ele é chamado de argumento.Então, pelo exemplo acima: o nome é um parâmetro, enquanto Liam, Jenny e Anja são argumentos."

utter_Vários_parâmetros:
  - text: "Dentro da função, você pode adicionar quantos parâmetros quiser: exemplo void myfunction (nome do char [], int age) {printf (hello %s.  Você tem %de ano de idade.0;} // Olá Liam.  Você tem 3 anos.//  Olá Jenny.Você tem 14 anos.// Olá Anja.Você tem 30 anos.Experimente você mesmo »Observe que quando você estiver trabalhando com vários parâmetros, a chamada de função deveTenha o mesmo número de argumentos que existem parâmetros e os argumentos devem ser passados na mesma ordem."

utter_Passe_as_matrizes_como_parâmetros_de_função:
  - text: "Você também pode passar as matrizes para uma função: exemplo void myfunction (int mynumbers [5]) {for (int i = 0; i <5; i ++) {printf (%d \ n, mynumbers [i]);}} int main () {int  myNumbers [5] = {10, 20, 30, 40, 50};MyFunction (MyNumbers);retornar 0;} Experimente você mesmo »Exemplo explicou a função (MyFunction) toma uma matriz como seu parâmetro (int mynumbers [5]) e atravessa os elementos da matriz com o loop for.Quando a função é chamada Inside Main (), passamos pela matriz Mynumbers, que gera os elementos da matriz.Observe que, quando você chama a função, você só precisa usar o nome da matriz ao passar como um argumento myfunction (mynumbers).No entanto, a declaração completa da matriz é necessária no parâmetro de função (int myNumbers [5])."

utter_Valores_de_retorno:
  - text: "A palavra -chave vazia, usada nos exemplos anteriores, indica que oA função não deve retornar um valor.Se vocêDeseja que a função retorne um valor, você pode usar um tipo de dados (como int ou float, etc.) em vez de void e usar a palavra -chave de retorno dentro da função: exemplo int myfunction (int x) {return 5 + x;} int main () {printf (resultado é: %d, myfunction (3));retornar 0;} // saídas  8 (5 + 3) Experimente você mesmo »Este exemplo retorna a soma de uma função com dois parâmetros: exemplo int myfunction (int x, int y) {return x + y;} int main ()  {printf (resultado é: %d, myfunction (5, 3));retornar 0;} // Saídas 8 (5 + 3) Experimente você mesmo »Você também pode armazenar o resultado em uma variável: exemplo int myfunction (int x, int y) {return x + y;} int main ()  {int resultado = myfunction (5, 3);printf (Resultado é =  %d , resultado); retornar 0;} // Saídas 8 (5 + 3) Experimente você mesmo»"

utter_Exemplo_da_vida_real_2:
  - text: "Para demonstrar um exemplo prático de uso de funções, vamos criar um programa que converte um valor de Fahrenheit em Celsius: Exemplo // Função para converter Fahrenheit para Celsius Float Tocelsius (Float  Fahrenheit) {return (5.0 / 9.0) * (Fahrenheit - 32.0);} int main () {// Defina um valor Fahrenheit float f_value =  98,8;// Chame a função com o valor do valor Fahrenheit Value = TOCELSIUS (F_VALUE);// imprima o valor de Fahrenheit printf (Fahrenheit: %.2f \ n, f_value);// imprima o resultado printf (convert Fahrenheit em Celsius: %.2f \ n, resultado);retornar  0;} Experimente você mesmo »❮ Anterior Próximo ❯ ★ +1 W3schools Pathfinder Rastreie seu progresso - é grátis!Entrar Inscrever-se"

utter_Ponteiros_e_matrizes:
  - text: "You can also use pointers to access arrays .Consider the following array of integers:Example int myNumbers[4] = {25, 50, 75, 100};You learned from the arrays chapter that you can loop through the array elements with a forLOOP: Exemplo int myNumbers [4] = {25, 50, 75, 100};int i;para (i = 0; i <4;    i ++) {printf (%d \ n, mynumbers [i]);} Resultado: 25 50 75 100 Experimente você mesmo »Em vez de imprimir o valor de cada elemento da matriz, vamos imprimir o endereço de memória de cada elemento da matriz: exemplo int myNumbers [4] = {25, 50, 75, 100};int i;para (i = 0; i <4;    i ++) {printf (%p \ n, & mynumbers [i]);} Resultado: 0x7ffe70f9d8f0 0x7ffe70f9d8f4 0x7ffe70f9d8f8 0x7ffe70f9d8fc Experimente você mesmo »Observe que o último número do endereço de memória dos elementos éDiferente, com uma adição de 4. É porque o tamanho de um tipo int é tipicamente 4 bytes, lembre -se: Exemplo // Crie uma variável int myint;// Obtenha o tamanho da memória de um int printf (%lu, sizeof (myint));Resultado: 4 Experimente você mesmo »Então, no exemplo de endereço da memória acima, você pode ver que o compiladorreservas 4 bytes de memória para cada elemento da matriz, o que significa que oA matriz inteira ocupa 16 bytes (4 * 4) de armazenamento de memória: exemplo int mynumbers [4] = {25, 50, 75, 100};// Obtenha o tamanho dos mynumbers    Array printf (%lu, sizeof (mynumbers));Resultado: 16 Experimente você mesmo »"

utter_Como_os_ponteiros_estão_relacionados_a_matrizes:
  - text: "OK, então qual é a relação entre ponteiros e matrizes?Bem, em c, o nome de umArray, é na verdade um ponteiro para o primeiroelemento do array.confused?Vamos tentar entender melhor isso e usar nosso exemplo de endereço de memória acimaNovamente.// Obtenha o endereço de memória do    MyNumbers Array printf (%p \ n, mynumbers);// Obtenha a memória    endereço do primeiro elemento da matriz printf (%p \ n, & mynumbers [0]);Resultado: 0x7ffe70f9d8f0 0x7ffe70f9d8f0 Experimente você mesmo »Isso basicamente significa que podemos trabalhar com matrizes através de ponteiros! Como?Como Mynumbers é um ponteiro para o primeiro elemento em Mynumbers, você pode usaro * operador para acessá -lo: exemplo int myNumbers [4] = {25, 50, 75, 100};// obtenha o valor do primeiro    elemento em mynumbers printf (%d, *mynumbers);Resultado: 25 Experimente você mesmo »Para acessar o restante dos elementos em MyNumbers, você pode incrementar o ponteiro/Array (+1, +2, etc): Exemplo de MyNumbers [4] = {25, 50, 75, 100};// obtenha o valor do segundo    elemento em mynumbers printf (%d \ n, *(mynumbers + 1));// obtenha o valor do    terceiro    elemento em mynumbers printf (%d, *(mynumbers + 2));//    e assim por diante.int *ptr = mynumbers;int i;for (i = 0; i <4; i ++) {printf (%d \ n, *(ptr+i));} Resultado: 25 50 75 100 Experimente você mesmo »Também é possível alterar o valor dos elementos da matriz com ponteiros: exemplo int mynumbers [4] = {25, 50, 75, 100};// Mudar o    valor do primeiro elemento para 13 *mynumbers = 13;// Mudar o    valor do segundo elemento para 17 *(mynumbers +1) = 17;// Pegar    o valor do primeiro elemento printf (%d \ n, *mynumbers);// Pegar    o valor do segundo elemento printf (%d \ n, *(mynumbers + 1));Resultado: 13 17 Experimente você mesmo »Essa maneira de trabalhar com matrizes pode parecer um pouco excessiva.Especialmente com  Matrizes simples como nos exemplos acima.No entanto, para grandes matrizes, pode ser  Muito mais eficiente para acessar e manipular matrizes com ponteiros.Também é considerado mais rápido e mais fácil acessar matrizes bidimensionais com ponteiros.E como as cordas são realmente matrizes, você também pode usar ponteiros para acessar strings.Por enquanto, é ótimo que você saiba como isso funciona.Mas, como especificamos no capítulo anterior;Ponteiros  deve ser tratado com cuidado, pois é possível substituir outros dados armazenados  na memória.Entrar Inscrever-se"

utter_Funções_de_matemática:
  - text: "Há também uma lista de funções matemáticas disponíveis, que permite executar tarefas matemáticas em números. Para usá -las, você deve incluir o arquivo de cabeçalho Math.h em seu programa: #include <ath.h>"

utter_Raiz_quadrada:
  - text: "Para encontrar a raiz quadrada de um número, use a função sqrt (): exemplo printf (%f, sqrt (16));Tente você mesmo "

utter_Em_volta_de_um_número:
  - text: "A função CEIL () arredonde um número para o seu número inteiro mais próximo, e o método piso () arredonde um número para baixo para o número inteiro mais próximo e retorna o resultado: exemplo printf (%f, teto (1.4));printf (%f,  piso (1.4));Tente você mesmo "

utter_Poder:
  - text: "A função Pow () retorna o valor de x ao poder de y (x y): exemplo printf (%f, pow (4, 3));Tente você mesmo "

utter_Outras_funções_de_matemática:
  - text: "Uma lista de outras funções matemáticas populares (da biblioteca <ath.h> pode ser encontrada na tabela abaixo: Função Descrição Abs (x) Retorna o valor absoluto de x ACOS (x) retorna a arccosina de x asin (x)Retorna a arcsina de x atan (x) retorna a arctangent de x cbrt (x) retorna a raiz do cubo de x cos (x) retorna o cosseno de x exp (x) retorna o valor de e x sin (x) retorna o senode x (x está em radianos) tan (x) retorna a tangente de um ângulo"

utter_Declaração_e_definição_de_função:
  - text: "Você acabou de aprender com os capítulos anteriores que pode criar e chamar uma função da seguinte maneira: Exemplo // Crie uma função void myfunction () {printf (Eu acabei de obter  executado! );} int main () {myfunction (); // Chame a função retornar 0;} Experimente você mesmo» Uma função consiste em duas partes: Declaração: o nome da função, o tipo de retorno e os parâmetros (se houver)Definição: o corpo da função (código a ser executado) void myfunction () {// declaração //    O corpo da função (definição)} Para otimização de código, recomenda -se separar a declaração e a definição da função. Você geralmente verá programas C que têm a declaração de função acima do main (),e definição de função abaixo do main ().Isso fará o códigomelhor organizado e mais fácil de ler: Exemplo // Declaração de função void myfunction ();// o método principal int main () {myfunction ();// Chame a função retornar 0;} // Definição da função void myfunction () {printf (Acabei de ser executado!);} Tente você mesmo "

utter_Outro_exemplo:
  - text: "Se usarmos o exemplo do capítulo anterior sobre parâmetros de função e valores de retorno: exemplo int myfunction (int x, int y) {return x + y;} int main ()  {int resultado = myfunction (5, 3);printf (Resultado é =  %d , resultado); retorno 0;} // produz 8 (5 + 3) Experimente você mesmo» É considerado uma boa prática de escrevê -lo assim: Exemplo // Declaração de função int myfunction (int, int); / / /// O método principal int main () {int resultado =  MyFunction (5, 3);// Chame a função printf (resultado é = %d, resultado);retornar 0;} //  Definição de função int myfunction (int x, int y) {return x + y;} Tente você mesmo "

utter_Estruturas:
  - text: "As estruturas (também chamadas estruturas) são uma maneira de agrupar várias variáveis relacionadas em um só lugar.Cada variável na estrutura éConhecido como membro da estrutura.Diferentes tipos de dados (int, float, char, etc.)."

utter_Criar_uma_estrutura:
  - text: "Você pode criar uma estrutura usando a palavra -chave STRUT e declarar cada um de seus membros dentro dos aparelhos encaracolados: Struct MyStructure {// Declaração de estrutura int mynum;// membro (int  variável) char myletter;// membro (char variável)};  // encerrar a estrutura com um semicolonto acessar a estrutura, você deve criar uma variável dela.dentro do método main (), seguido pelo nomeda estrutura e, em seguida, o nome da variável da estrutura: crie uma variável struct com o nome s1: struct mystructure {int mynum;char myletter;};int main ()  {struct myStructure s1;retornar 0;}"

utter_Membros_da_estrutura_de_acesso:
  - text: "Para acessar os membros de uma estrutura, use a sintaxe do DOT (.): Exemplo // Crie uma estrutura chamada MyStructure Struct MyStructure {int myNum;char myletter;};int main () {// Crie uma variável de estrutura    da mystrutura chamada S1 Struct MyStructure S1;// atribui valores aos membros do S1 S1.mynum = 13;s1.myletter = 'b';// Valores de impressão printf (meu    Número: %d \ n , s1.mynum); printf ( minha letra: %c \ n , s1.myletter); retornar 0;} Experimente você mesmo» Agora você pode criar facilmente várias variáveis de estrutura com valores diferentes,Usando apenas uma estrutura: Exemplo // Crie diferentes variáveis de estrutura Struct myStructure S1; Struct MyStructure S2; // Atribua valores a diferentes variáveis de estrutura S1.mynum = 13; S1.myletter = 'B'; S2.mynum = 20; S2.myLetter = 'c'; tente você mesmo »"

utter_E_as_cordas_em_estruturas?:
  - text: "Lembre -se de que as cordas em C são na verdade uma variedade de personagens eInfelizmente, você não pode atribuir um valor a uma matriz como esta: Exemplo Struct MyStructure {int mynum;char myletter;char mystring [30];//    Corda };int main () {struct myStructure s1;// tentando atribuir um valor ao string s1.mystring = algum texto;// tentando imprimir o valor printf (minha string: %s,    s1.Mystring);retornar 0;} Ocorrerá um erro: prog.c: 12: 15: erro: atribuição à expressão com tipo de matriz Experimente você mesmo »No entanto, há uma solução para isso!Você pode usar a função strcpy () e atribuir o valor a S1.Mystring, como este: Exemplo de mystructure struct {int mynum;char myletter;char mystring [30];// Corda };int main () {struct myStructure s1;// atribui um valor à string usando    a função strcpy strcpy (S1.Mystring, algum texto);// imprima o valor printf (minha string: %s, s1.mystring);retornar 0;} Resultado: minha string: algum texto Experimente você mesmo »"

utter_Sintaxe_mais_simples:
  - text: "Você também pode atribuir valores aos membros de uma variável de estrutura no momento da declaração,em uma única linha. Apenas insira os valores em uma lista separada por vírgulaInside Curly Baces {}.Observe que você nãotem que usar a função strcpy () para stringvalores com issoTécnica: Exemplo // Crie uma estrutura MyStructure Structure {int mynum;char myletter;char mystring [30];};int main () {// Crie uma variável de estrutura e atribua valores a ela estrutura mystructure s1 = {13,    'B', algum texto};// valores de impressão printf ( %d %c %s, s1.mynum, s1.myletter,    s1.Mystring);retornar 0;} Experimente você mesmo »Nota: a ordem dos valores inseridos deve corresponder à ordem de  Os tipos variáveis declarados na estrutura (13 para int, 'b' para char, etc)."

utter_Copiar_estruturas:
  - text: "Você também pode atribuir uma estrutura a outra. No exemplo a seguir, os valores de S1 são copiados para S2: Exemplo de estrutura da mystructure s1 = {13, 'b', algum texto};estrutura mystructure s2;s2 = s1;Tente você mesmo "

utter_Modificar_valores:
  - text: "Se você deseja alterar/modificar um valor, pode usar a sintaxe do DOT (.) .E para modificar umValor da string, a função strcpy () é útil novamente: exemplo struct myStructure {int mynum;char myletter;char mystring [30];};int main () {// Crie uma variável de estrutura e atribua valores a ela estrutura    myStructure s1 = {13, 'b', algum texto};// modifica os valores s1.mynum = 30;s1.myletter = 'c';strcpy (s1.mystring,    Algo mais);// Valores de impressão printf ( %d %c    %s , s1.mynum, s1.myletter, s1.mystring); retorna 0;} Experimente você mesmo» Os valores modificadores são especialmente úteis quando você copia valores da estrutura: Exemplo // Crie uma variável de estrutura e atribua valores a ele estrutura    myStructure s1 = {13, 'b', algum texto};// Crie outra estrutura    Variável MyStructure S2;// copiar valores S1 para S2 S2 =    s1;// altere os valores S2 S2.mynum = 30;s2.myLetter = 'c';strcpy (s2.mystring,    Algo mais);// Valores de impressão printf ( %d %c    %s \ n , s1.mynum, s1.myletter, s1.mystring); printf ( %d %c    %s \ n , s2.mynum, s2.myletter, s2.mystring); tente você mesmo» OK, então, como as estruturas são úteis? Imagine que você deve escrever um programa para armazenar informações diferentes sobre carros, como a marca,modelo,e ano.O que é ótimo nas estruturas é que você pode criar umModelo de carro e use -o para todos os carros que você faz.Veja abaixo um exemplo da vida real."

utter_Exemplo_da_vida_real_3:
  - text: "Use uma estrutura para armazenar informações diferentes sobre carros: Exemplo de Struct Car {Char Brand [50];modelo de char [50];int  ano;};int main () {struct car car1 = {bmw, x5,  1999};Struct Car Car2 = {Ford, Mustang, 1969};estrutura  Carro car3 = {Toyota, Corolla, 2011};printf ( %s %s %d \ n,  car1.brand, car1.model, car1.year);printf ( %s %s %d \ n, car2.brand,  car2.model, car2. ano);printf ( %s %s %d \ n, car3.brand, car3.model,  car3 anos);retornar 0;} Tente você mesmo "

utter_C_exercícios_17:
  - text: "Teste -se com exercícios Exercício: Preencha a parte que faltava para criar uma estrutura de carro: carro {  marca de char [50];  modelo de char [50];  int ano;};Envie Resposta »Comece o exercício"

utter_Teste_-se_com_exercícios_17:
  - text: "Exercício: Preencha a parte que faltava para criar uma estrutura de carro: carro {  marca de char [50];  modelo de char [50];  int ano;};Envie Resposta »Comece o exercício"

utter_Exercício__17:
  - text: "Preencha a parte que faltava para criar uma estrutura de carro: carro {  marca de char [50];  modelo de char [50];  int ano;}; Enviar resposta »Inicie o exercício"

utter_Recursão:
  - text: "Recursão é a técnica de fazer uma função chamada em si.Esta técnica fornece uma maneiraPara divulgar problemas complicados em problemas simples, mais fáceis de resolver. A recursão pode ser um pouco difícil de entender.OA melhor maneira de descobrir como funciona é experimentar."

utter_Exemplo_de_recursão:
  - text: "Adicionar dois números juntos é fácil de fazer, mas adicionar uma variedade de números é maiscomplicado.No exemplo a seguir, a recursão é usada para adicionar uma variedade de númerosJuntos, dividindo -o na simples tarefa de adicionar dois números: Exemplo de Int Sum (int k);int main () {int resultado = soma (10);printf (%d, resultado);retornar 0;} int sum (int k) {if (k> 0) {return k + sum (k - 1);} else {return 0;}} Experimente você mesmo »Exemplo explicado quando a função SUM () é chamada, adiciona parâmetro k à soma de todos os números menoresdo que k e retorna o resultado.Quando K se torna 0, a função retorna 0. quandoEm execução, o programa segue estas etapas: 10 + soma (9) 10 + (9 + soma (8)) 10 + (9 + (8 + soma (7))) ... 10 + 9 + 8 + 7 + 6+ 5 + 4 + 3 + 2 + 1 + soma (0) 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0, pois a função não se chama quando k é 0, o programa paralá e retorna oResultado. O desenvolvedor deve ter muito cuidado com a recursão, pois pode ser bastante fácil entrar na escrita de uma função que nunca termina, ou uma que usa quantidades excessivas de memória ou potência do processador.No entanto, quando escritos corretamente, a recursão pode ser uma abordagem muito eficiente e matematicamente elegante para a programação."

